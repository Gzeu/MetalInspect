plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    id 'jacoco'
}

// JaCoCo coverage configuration
jacoco {
    toolVersion = "0.8.8"
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/*_Hilt*',
        '**/*_Factory*',
        '**/*_MembersInjector*',
        '**/*Module*',
        '**/*Component*'
    ]
    
    def mainSrc = "${project.projectDir}/src/main/java"
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree, kotlinDebugTree])
    executionData.from = fileTree(dir: buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'
    ])
}

tasks.register('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    dependsOn 'jacocoTestReport'
    
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% minimum overall coverage
            }
        }
        
        rule {
            element = 'CLASS'
            excludes = [
                '*.BuildConfig',
                '*.R',
                '*.R$*',
                '*.*Test*',
                '*.Hilt_*',
                '*.*_Factory*',
                '*.*Module*',
                '*.*Component*'
            ]
            
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60 // 60% minimum class coverage
            }
        }
    }
}

android {
    namespace 'com.metalinspect.app'
    compileSdk 33

    defaultConfig {
        applicationId "com.metalinspect.app"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Custom test runner arguments for coverage
        testInstrumentationRunnerArguments = [
            'coverage': 'true',
            'coverageFile': '/sdcard/Android/data/com.metalinspect.app/files/coverage.exec'
        ]
        
        // Room schema export
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
        
        // Enable vector drawable support for API < 21
        vectorDrawables {
            useSupportLibrary true
        }
        
        buildConfigField "boolean", "DEBUG_LOGGING", "true"
        buildConfigField "boolean", "DATABASE_ENCRYPTION", "false"
    }
    
    signingConfigs {
        release {
            if (project.hasProperty('KEYSTORE_FILE')) {
                storeFile file(project.property('KEYSTORE_FILE'))
                storePassword project.property('KEYSTORE_PASSWORD')
                keyAlias project.property('KEY_ALIAS')
                keyPassword project.property('KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
            buildConfigField "boolean", "DEBUG_LOGGING", "true"
            buildConfigField "boolean", "DATABASE_ENCRYPTION", "false"
        }
        
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            
            // Production configuration
            buildConfigField "boolean", "DEBUG_LOGGING", "false"
            buildConfigField "boolean", "DATABASE_ENCRYPTION", "true"
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
            "-opt-in=kotlin.RequiresOptIn",
            "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        ]
    }
    
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt']
        }
    }
}

dependencies {
    // Core Android dependencies
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    
    // Java 8+ API desugaring support
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
    
    // Architecture Components
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.fragment:fragment-ktx:1.6.0'
    implementation 'androidx.activity:activity-ktx:1.7.2'
    
    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    
    // Room Database
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    
    // SQLCipher for database encryption
    implementation "net.zetetic:android-database-sqlcipher:4.5.4"
    implementation "androidx.sqlite:sqlite-ktx:2.3.1"
    
    // Dependency Injection - Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    
    // CameraX
    def camerax_version = "1.3.0"
    implementation "androidx.camera:camera-core:$camerax_version"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:$camerax_version"
    implementation "androidx.camera:camera-extensions:$camerax_version"
    
    // PDF Generation
    implementation 'com.itextpdf:itext7-core:7.2.5'
    
    // Image Processing
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    kapt 'com.github.bumptech.glide:compiler:4.15.1'
    
    // Date/Time handling
    implementation 'org.jetbrains.kotlinx:kotlinx-datetime:0.4.0'
    
    // CSV/Excel export
    implementation 'com.opencsv:opencsv:5.7.1'
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    
    // Permissions
    implementation 'pub.devrel:easypermissions:3.0.0'
    
    // File operations
    implementation 'androidx.documentfile:documentfile:1.0.1'
    
    // Work Manager for background tasks
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    
    // Logging
    implementation 'com.jakewharton.timber:timber:5.0.1'
    
    // Testing dependencies - Unit Tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.truth:truth:1.1.4'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.0.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'androidx.room:room-testing:2.5.0'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'app.cash.turbine:turbine:1.0.0'
    
    // Testing dependencies - Instrumented Tests
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.room:room-testing:2.5.0'
    androidTestImplementation 'com.google.truth:truth:1.1.4'
    androidTestImplementation 'org.mockito.kotlin:mockito-kotlin:5.0.0'
    androidTestImplementation 'org.mockito:mockito-android:5.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$hilt_version"
    
    // Test Orchestrator
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
    
    // Debug tools
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'
    debugImplementation 'androidx.fragment:fragment-testing:1.6.0'
}